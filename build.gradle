/*
 * Copyright (c) 2022. AppDynamics LLC and its affiliates.
 * All rights reserved.
 *
 */

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general-purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.0.2/samples
 */

plugins {
    id 'java-library-distribution'
    id 'com.appdynamics.gradle.plugins.appd-publish' version '2.4.0'
    id 'com.appdynamics.gradle.plugins.pipeline.pipelinePlugin' version '3.5.179'
    id 'com.appdynamics.gradle.plugins.appd-integration-test' version '0.0.7'
    id 'org.sonarqube' version '3.2.0'
}

// pipelinePlugin
//
// Specify CI/CD tasks in order and run `./gradlew pipeline` to generate new .teamcity folder.
// Warning: You have to manually set the agent type (e.g. BigSur) in the settings.kts afterwards.
pipeline {
    teamcityParent = "EUM"
    projectName = "Flutter Agent"

    buildTasks = [
            "build",
            "upgradeFlutter",
            "installPackages",
            "analyze",
            "runUnitTests",
            "buildAndroid",
            "buildiOS",
            "generateDocs"
    ]

    integrationTestTasks = [
            ":example:runIntegrationTestsAndroid",
            ":example:runIntegrationTestsiOS"
    ]
}

group = 'com.appdynamics.eum'
appdVersion {
    baseVersion = new File('lib/version.txt').text
}

sonarqube {
    properties {
        property "sonar.projectName", project.name
        property "sonar.projectVersion", version
    }
}

// distribution + appd-publish
//
// Specify which files to .zip when publishing to Artifactory.
distributions {
    main {
        distributionBaseName.set("rum-flutter")
        contents {
            // .gitignore exception
            from(".idea/runConfigurations") {
                into(".idea/runConfigurations")
            }
            from(".") {
                def ignores = []
                File rootIgnore = file(".gitignore")
                rootIgnore.eachLine { line ->
                    if (!line.startsWith('#') && !line.isEmpty()) {
                        ignores.add(line)
                    }
                }

                File exampleIgnore = file("example/.gitignore")
                exampleIgnore.eachLine { line ->
                    if (!line.startsWith('#') && !line.isEmpty()) {
                        ignores.add("example/" + line)
                    }
                }
                exclude ignores
            }
        }
    }
}


task installPackages(type: Exec) {
    commandLine "./tool/flutter-get.sh"
}

task analyze(type: Exec) {
    commandLine "./tool/flutter-analyze.sh"
}

task runUnitTests(type: Exec) {
    commandLine "./tool/flutter-test.sh"
}

task generateDocs(type: Exec) {
    commandLine "./tool/generate-docs.sh"
}

task viewDocs(type: Exec) {
    commandLine "./tool/view-docs.sh"
}