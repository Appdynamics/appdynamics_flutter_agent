/*
 * Copyright (c) 2021. AppDynamics LLC and its affiliates.
 * All rights reserved.
 *
 */

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.0.2/samples
 */

plugins {
    id 'java-library'
    id 'com.appdynamics.gradle.plugins.appd-publish' version '2.2.22'
    id 'com.appdynamics.gradle.plugins.pipeline.pipelinePlugin' version '3.5.179'
    id 'com.appdynamics.gradle.plugins.appd-integration-test' version '0.0.7'
    id 'org.sonarqube' version '3.2.0'
}

// pipelinePlugin
//
// Specify CI/CD tasks in order and run `./gradlew pipeline` to generate new .teamcity file.
pipeline {
    teamcityParent = "EUM"
    projectName = "Flutter Agent"

    buildTasks = [
            "build",
            "upgradeFlutter",
            "installPackages",
            "analyze",
            "runUnitTests",
            "buildAndroid",
            "buildiOS",
            "generateDocs"
    ]

    integrationTestTasks = [
            ":example:runIntegrationTestsAndroid",
            ":example:runIntegrationTestsiOS"
    ]
}

group = 'com.appdynamics.eum'
appdVersion {
    baseVersion = '0.1'
}

sonarqube {
    properties {
        property "sonar.projectName", project.name
        property "sonar.projectVersion", version
    }
}

task upgradeFlutter(type: Exec) {
    commandLine "./scripts/flutter-upgrade.sh"
}

task installPackages(type: Exec) {
    commandLine "./scripts/flutter-get.sh"
}

task analyze(type: Exec) {
    commandLine "./scripts/flutter-analyze.sh"
}

task runUnitTests(type: Exec) {
    commandLine "./scripts/flutter-test.sh"
}

task generateDocs(type: Exec) {
    commandLine "./scripts/generate-docs.sh"
}

task viewDocs(type: Exec) {
    commandLine "./scripts/view-docs.sh"
}